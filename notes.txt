1. INSTALLATION AND CONFIGURATION
    - Install or update Git -> sudo apt-get install git
    - View Git version -> git --version
    - Set up username -> git config --global user.name [NAME]
    - Set up email -> git config --global user.email [EMAIL]
    - Set up VS Code as default Git editor -> git config --global core.editor "code --wait"
    - Modify any global setting in .gitconfig -> git config --global [CATEGORY].[PROPERTY] [VALUE]

2. TERMINAL FUNDAMENTALS
    - List directory contents -> ls
    - List directory contents including hidden files and folders -> ls -a
    - Print current directory path -> pwd
    - Change directory -> cd [LOCATION]
    - Create a file -> touch [FILE1 FILE2 FILE3 ETC.]
    - Create a directory -> mkdir [DIRECTORY1 DIRECTORY2 DIRECTORY3 ETC.]
    - Delete a file -> rm [FILE1 FILE2 FILE3 ETC.]
    - Delete a directory -> rm -rf [DIRECTORY1 DIRECTORY2 DIRECTORY3 ETC.]

3. ADDING AND COMMITTING
    - Initiate a repository -> git init
    - Terminate a repository -> rm -rf .git
    - WORKING DIRECTORY vs STAGING AREA vs REPOSITORY
    - View repository status -> git status
    - Stage files and folders for commit -> git add [FILE1 FOLDER1 FILE2 ETC.]
    - Stage all files and folders for commit -> git add
    - Commit all staged files with a description message -> git commit -m [MESSAGE]
    - Commit staged files with a long commit message -> git commit
    - View simplified Git log -> git log --oneline
    - Correct the last commit -> git commit --amend
    - Force Git to ignore a file -> .gitignore file

4. BRANCHING
    - View all branches -> git branch
    - Create a new branch -> git branch [BRANCH NAME]
    - Switch to a specific branch -> git switch [BRANCH NAME]
    - Create and switch to a new branch in one go -> git switch -c [BRANCH NAME]
    - Delete a branch -> git branch -d [BRANCH NAME]
    - Rename a branch -> git branch -m [NEW BRANCH NAME]

5. MERGING
    - Perform a fast forward merge
        1. git branch [DESTINATION BRANCH]
        2. git merge [ORIGIN BRANCH]
    - View all unstaged changes -> git diff
    - View all staged and unstaged changes -> git diff HEAD
    - View all staged changes -> git diff --staged
    - View changes in a particular file -> git diff [FILE NAME] / git diff HEAD [FILE NAME] / git diff --staged [FILE NAME]
    - Compare changes between two branches -> git diff [BRANCH 1]..[BRANCH 2]
    - Compare changes in a specific file between branches -> git diff [BRANCH 1]..[BRANCH 2] [FILE NAME]
    - Compare changes between two commits -> git diff [COMMIT 1]..[COMMIT 2]

6. STASHING
    - Temporarily save changes without committing -> git stash
    - Move previously stashed changes back into the working directory -> git stash pop
    - Apply previously stashed changes without removing them from the stash
    - View all stashed items and their numbers -> git stash list
    - Apply a specific stashed item -> git stash apply stash@{[STASH NUMBER]}
    - Delete a specific stashed item from the stash list -> git stash drop stash@{[STASH NUMBER]}
    - Delete all stashed items from the stash list -> git stash clear

7. CHECKING OUT AND RESTORING
    - View a past commit (detach HEAD) -> git checkout [COMMIT HASH]
    - Go back to the latest commit -> git switch [BRANCH]
    - Branch off of a past commit
        1. git checkout [COMMIT HASH]
        2. git branch [BRANCH NAME]
    - View a past commit relative to HEAD -> git checkout HEAD~[NUMBER OF STEPS]
    - Reattach HEAD to the most recent branch -> git switch -
    - Restore the last commit and delete all working directory changes -> git checkout HEAD [FILE NAME] / git restore [FILE NAME]
    - Restore the files to a specific commit -> git restore --source [COMMIT REFERENCE] [FILE NAME]
    - Remove staged files from the staging area -> git restore --staged [FILE NAME]
    - Reset to a past commit without losing the current changes -> git reset [COMMIT HASH]
    - Reset to a past commit and delete the current changes -> git reset --hard [COMMIT HASH]
    - Revert new changes to a past commit by making a new commit -> git revert [COMMIT HASH]

8. GITHUB BASICS
    - Download a local copy of a remote repository -> git clone [REPOSITORY URL]
    - Check for existing SSH keys -> ls -al ~/.ssh
    - Generate a new SSH key -> GitHub instructions
    - Check for remote repositories -> git remote
    - Add a new remote to a repository -> git remote add [REMOTE NAME] [URL]
    - Delete remote -> git remote rm [REMOTE NAME]
    - Push a local branch to a remote repository -> git push [REMOTE NAME] [BRANCH NAME]
    - Push a local branch to a remote branch with a different name -> git push [REMOTE NAME] [LOCAL BRANCH]:[REMOTE BRANCH]
    - Link a local branch to a remote -> git push -u [REMOTE NAME] [LOCAL BRANCH]
    - Set up a repository on GitHub first -> git clone [REMOTE URL]
    - View remote branches -> git branch -r
    - Switch to a remote branch that doesn't yet exist locally -> git switch [BRANCH NAME]
    - Fetch all changes of a remote without disrupting the working directory -> git fetch
    - Fetch changes of a specific remote branch -> git fetch [REMOTE BRANCH NAME]
    - Automatically pull a remote branch with the same name as the working directory branch -> git pull
    - Merge changes from a remote to the current branch -> git pull [REMOTE NAME] [BRANCH NAME]

9. MARKDOWN
    - 6 heading levels based on "#" (#, ##, ###, ####, #####, ######)
    - Line separator -> *** (or more asterisks for a longer line)
    - Bold text -> **[TEXT]**
    - Italic text -> *[Italic]*
    - Blockquote -> > [BLOCKQUOTE] (more ">" for nested blockquotes)
    - List item -> * [ITEM] (indented line for multi-level lists)
    - Single line of code -> `[CODE]`
    - Code block -> ```[CODE]```
    - e.g.: 
        ``` js
        CODE LINE
        CODE LINE
        CODE LINE
        ```
    - Link -> [[LINK TEXT]] ([URL])
    - Image -> ![ALT TEXT] (URL)

10. PROJECT WORKFLOWS
    - Centralized -> Everybody working on the same branch
    - Feature branching -> Every change is made on a separate branch and then merged into the main branch upon approval
    - Forking and cloning -> All changes are made in entirely separate repositories, one for each team member
    - Resolving conflicts in pull requests:
        1. Pull the latest version of all branches from origin
        2. Merge main into the secondary branch -> git merge --no-ff main
        3. Resolve merge conflicts locally
        4. Switch to main branch -> git switch main
        5. Merge the branch into main -> git merge [BRANCH]

11. REBASING
    - Rebase a branch to the tip of another branch
        1. git switch [BRANCH]
        2. git rebase [MAIN BRANCH]
    - Resolve conflicts resulting from a rebase
        1. git rebase [BRANCH]
        2. Resolve conflicts in code editor
        3. git add .
        4. git rebase --continue
    - Cancel conflictive rebase -> git rebase --abort
    - Initiate interactive rebase -> git rebase -i [COMMIT REFERENCE]

12. TAGGING
    - List all tags -> git tag
    - List all tags that follow a certain pattern -> git tag -l "[PATTERN]" (e.g. git tag -l "v15*")
    - Check out a past commit using a tag reference -> git checkout [TAG]
    - Diff two commits using their tag reference -> git diff [TAG1] [TAG2]
    - Create a lightweight tag pointing to wherever HEAD is -> git tag [TAG NAME]
    - Create an annotated tag pointing to wherever HEAD is -> git tag -a [TAG NAME]
    - Tag a past commit -> git tag [TAG NAME] [COMMIT REFERENCE]
    - Force a tag change -> git tag -f [TAG NAME] [COMMIT REFERENCE]
    - Delete a tag -> git tag -d [TAG NAME]
    - Push a tag to a remote -> git push [REMOTE] [TAG NAME]
    - Push all tags to a remote -> git push [REMOTE] --tags

13. GIT BEHIND THE SCENES
    - Git stores everything in the form of hashes using SHA-1
    - Retrieve the contents and references of a stored item -> git cat-file -p [FILE]
    - Retrieve the type of a stored item -> git cat-file -t [FILE]
    - Git object types: commits, trees, blobs, tags
    - Every commit points to a tree (folder), which in turn points to more trees and blobs
    - With every commit, git encrypts all files, stores them as blobs, and references them using trees to compress the directory
    - At any later point, the directory can be reconstructed using those files in the .git/objects folder

14. REFLOGS
    - Git tracks all changes to references (e.g. HEAD changing to another commit)
    - List a full reference log -> git reflog show [REFERENCE]
    - Go back a certain number of steps in the reflog -> git reflog show HEAD@{[NUMBER OF STEPS]}

15. ALIASES
    - Write a new git alias -> git config --global alias.[ALIAS NAME] [COMMAND]
    - Write a new alias with access to shell commands -> ![COMMAND]